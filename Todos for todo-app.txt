Next up:

. Implement Error boundaries with ValidateInput function that will run on BOTH main input and edit-todo-input(use as boolean guard clause in both)
    ERROR IF:
    - overall todo is too long
    - does not contains any letters/numbers at all (only spaces, maybe if it starts with more than 3 spaces)
    - contains a super long string (will break the design!)
    THEN --> implement errorModalWinodw --> refactor so previous modal window design is reusable and can be a
    resuable component --> then all these erros should trigger that error-version of the modal component
.Fix textarea input for modal window, then make general re-usable component for modal window
.Add sorting functionality (ascending, descending and default) --> based on index as timestamp
. Add clear-all button (deletes all todos)
. Fix mobile responsiveness (3 dots with small windwow-popup(maybe modal))
. Once user starts typing inside of input field --> make new button popup next to add: "more" where...
    - user can add priority level (exclamation mark-value from 1 to 3 --> icons lighting up functionality)
    - user can add due date (read up on JS-date features)
        if due date is in less than 3 days --> add orange label with due-date warning tag
        if due date is in 1 day -->  add red label with due date in one day
. add progress bar that fills up (percentage of completed tasks)
. activate emojis button (btw add badge('activate emojies?' or 'deactive emojies') on hover on this option)
. make sure there are no bugs in local storage (annoying async hell with timeout)
. improve button animations: don't use scale on all of them(add modern hover effects)
. in future: use Firebase or store todos in backend instead of local storage ? 
. Run react-testing library?

TEST